// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShowNTell.EntityFramework;

namespace ShowNTell.EntityFramework.Migrations
{
    [DbContext(typeof(ShowNTellDbContext))]
    [Migration("20200322220014_followers")]
    partial class followers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShowNTell.Domain.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("ImagePostId")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ImagePostId");

                    b.HasIndex("UserEmail");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ShowNTell.Domain.Models.Follow", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollowerEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserEmail", "FollowerEmail");

                    b.HasIndex("FollowerEmail");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("ShowNTell.Domain.Models.ImagePost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail");

                    b.ToTable("ImagePosts");
                });

            modelBuilder.Entity("ShowNTell.Domain.Models.Like", b =>
                {
                    b.Property<int>("ImagePostId")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("ImagePostId", "UserEmail");

                    b.HasIndex("UserEmail");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("ShowNTell.Domain.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ShowNTell.Domain.Models.Comment", b =>
                {
                    b.HasOne("ShowNTell.Domain.Models.ImagePost", "ImagePost")
                        .WithMany("Comments")
                        .HasForeignKey("ImagePostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShowNTell.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserEmail");
                });

            modelBuilder.Entity("ShowNTell.Domain.Models.Follow", b =>
                {
                    b.HasOne("ShowNTell.Domain.Models.User", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShowNTell.Domain.Models.User", "User")
                        .WithMany("Followers")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShowNTell.Domain.Models.ImagePost", b =>
                {
                    b.HasOne("ShowNTell.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserEmail");
                });

            modelBuilder.Entity("ShowNTell.Domain.Models.Like", b =>
                {
                    b.HasOne("ShowNTell.Domain.Models.ImagePost", "ImagePost")
                        .WithMany("Likes")
                        .HasForeignKey("ImagePostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShowNTell.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
